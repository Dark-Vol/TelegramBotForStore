import telebot
from telebot import types
import sqlite3
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
with open("products.json", "r", encoding="utf-8") as file:
    data = json.load(file)
    categories = {category['name']: category['products'] for category in data['categories']}

bot = telebot.TeleBot("8126590226:AAEbDpzt7KZj8QHtj8tECgAonAQP3bKjVRA")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
USER_DATA_FILE = "user_data.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON
def save_user_data(user_id, language, first_name, last_name, contact):
    try:
        user_data = {}
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        try:
            with open(USER_DATA_FILE, "r", encoding="utf-8") as file:
                user_data = json.load(file)
        except FileNotFoundError:
            user_data = {}

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        user_data[user_id] = {
            "language": language,
            "first_name": first_name,
            "last_name": last_name,
            "contact": contact
        }

        with open(USER_DATA_FILE, "w", encoding="utf-8") as file:
            json.dump(user_data, file, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_db():
    return sqlite3.connect("your_database.db")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start
@bot.message_handler(commands=["start", "main", "hello"])
def main(message):
    ask_language(message)

# –ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞ –æ–±—â–µ–Ω–∏—è
def ask_language(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_ru = types.KeyboardButton("–†—É—Å—Å–∫–∏–π")
    btn_en = types.KeyboardButton("English")
    markup.add(btn_ru, btn_en)

    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text in ["–†—É—Å—Å–∫–∏–π", "English"])
def handle_language(message):
    language = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.", 
                     reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                         types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)))
    bot.register_next_step_handler(message, handle_contact, language)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
def handle_contact(message, language):
    if message.contact:
        contact = message.contact.phone_number
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
        bot.register_next_step_handler(message, handle_name, contact, language)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.", 
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                             types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)))
        bot.register_next_step_handler(message, handle_contact, language)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
def handle_name(message, contact, language):
    full_name = message.text
    first_name, last_name = full_name.split(maxsplit=1) if ' ' in full_name else (full_name, "")
    save_user_data(message.chat.id, language, first_name, last_name, contact)

    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    send_main_menu(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—á–Ω–æ, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ
    btn1 = types.KeyboardButton("üé∏ –ì–∏—Ç–∞—Ä—ã")
    btn2 = types.KeyboardButton("ü•Å –£–¥–∞—Ä–Ω—ã–µ")
    btn3 = types.KeyboardButton("üéπ –ö–ª–∞–≤–∏—à–Ω—ã–µ")
    btn4 = types.KeyboardButton("üé∫ –î—É—Ö–æ–≤—ã–µ")
    btn5 = types.KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞")
    btn6 = types.KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(btn1, btn2, btn3, btn4)
    markup.add(btn5, btn6)
    
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
def send_category_page(message, category, page):
    items_per_page = 2
    products_list = categories.get(category, [])
    total_pages = (len(products_list) + items_per_page - 1) // items_per_page
    start = (page - 1) * items_per_page
    end = start + items_per_page
    page_items = products_list[start:end]

    text = f"{category} - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
    for item in page_items:
        text += f"üé∂ {item['name']}\n–¶–µ–Ω–∞: {item['price']} —Ä—É–±\n–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n\n"

    markup = types.InlineKeyboardMarkup(row_width=3)
    if page > 1:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{category}_{page - 1}"))
    markup.add(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="current_page"))
    if page < total_pages:
        markup.add(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{category}_{page + 1}"))
    home_button = types.InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home")
    markup.add(home_button)

    bot.send_message(message.chat.id, text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("add_to_cart_"))
def add_to_cart(call):
    item_id = int(call.data.split("_")[2])
    user_id = call.from_user.id

    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT cart_id FROM cart WHERE user_id = ? AND status = 0", (user_id,))
    cart = cursor.fetchone()

    if not cart:
        cursor.execute("INSERT INTO cart (user_id, status) VALUES (?, 0)", (user_id,))
        conn.commit()
        cart_id = cursor.lastrowid
    else:
        cart_id = cart[0]

    cursor.execute("""
        INSERT INTO cart_item (cart_id, item_id, price, active) 
        VALUES (?, ?, (SELECT price FROM item WHERE item_id = ?), 1)
    """, (cart_id, item_id, item_id))
    conn.commit()
    conn.close()

    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@bot.message_handler(func=lambda message: message.text.startswith("üé∂"))
def category_handler(message):
    category = message.text[2:]
    send_category_page(message, category, page=1)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π"
@bot.callback_query_handler(func=lambda call: True)
def callback_page(call):
    if call.data == "home":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        send_main_menu(call.message)
    elif call.data == "current_page":
        bot.answer_callback_query(call.id, text="–≠—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    else:
        category, page = call.data.rsplit("_", 1)
        page = int(page)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        send_category_page(call.message, category, page)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
