import telebot
from telebot import types

bot = telebot.TeleBot("8126590226:AAEbDpzt7KZj8QHtj8tECgAonAQP3bKjVRA")

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
products = {
    "–ì–∏—Ç–∞—Ä—ã": [
        {"name": "–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞ Fender", "price": "12000 —Ä—É–±", "description": "–û—Ç–ª–∏—á–Ω—ã–π –∑–≤—É–∫ –∏ –∫–∞—á–µ—Å—Ç–≤–æ"},
        {"name": "–≠–ª–µ–∫—Ç—Ä–æ–≥–∏—Ç–∞—Ä–∞ Gibson", "price": "55000 —Ä—É–±", "description": "–î–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ä–æ–∫–µ—Ä–æ–≤"},
        {"name": "–ë–∞—Å-–≥–∏—Ç–∞—Ä–∞ Yamaha", "price": "30000 —Ä—É–±", "description": "–ì–ª—É–±–æ–∫–∏–π –±–∞—Å–æ–≤—ã–π –∑–≤—É–∫"},
        {"name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞ Cort", "price": "8000 —Ä—É–±", "description": "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"},
    ],
    "–£–¥–∞—Ä–Ω—ã–µ": [
        {"name": "–ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tama", "price": "70000 —Ä—É–±", "description": "–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤"},
        {"name": "–¢–∞—Ä–µ–ª–∫–∏ Zildjian", "price": "12000 —Ä—É–±", "description": "–û—Ç–ª–∏—á–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"},
        {"name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –±–∞—Ä–∞–±–∞–Ω—ã Roland", "price": "45000 —Ä—É–±", "description": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ"},
    ],
    "–ö–ª–∞–≤–∏—à–Ω—ã–µ": [
        {"name": "–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä Yamaha", "price": "20000 —Ä—É–±", "description": "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–∑—ã–∫–∏"},
        {"name": "–ú–∏–¥–∏-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ Novation", "price": "15000 —Ä—É–±", "description": "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–∏–∏"},
        {"name": "–≠–ª–µ–∫—Ç—Ä–æ–ø–∏–∞–Ω–∏–Ω–æ Casio", "price": "25000 —Ä—É–±", "description": "–ó–≤—É—á–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø–∏–∞–Ω–∏–Ω–æ"},
    ],
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start
@bot.message_handler(commands=["start", "main", "hello"])
def main(message):
    send_main_menu(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üé∏ –ì–∏—Ç–∞—Ä—ã")
    btn2 = types.KeyboardButton("ü•Å –£–¥–∞—Ä–Ω—ã–µ")
    btn3 = types.KeyboardButton("üéπ –ö–ª–∞–≤–∏—à–Ω—ã–µ")
    btn4 = types.KeyboardButton("üÜò –ü–æ–º–æ—â—å")
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

# –°–ø—Ä–∞–≤–∫–∞
@bot.message_handler(commands=["help"])
def help_command(message):
    bot.send_message(
        message.chat.id, 
        "<b>Help</b>: –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.", 
        parse_mode="html"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@bot.message_handler(func=lambda message: message.text in ["üé∏ –ì–∏—Ç–∞—Ä—ã", "ü•Å –£–¥–∞—Ä–Ω—ã–µ", "üéπ –ö–ª–∞–≤–∏—à–Ω—ã–µ"])
def category_handler(message):
    category = message.text[2:]  # –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    send_category_page(message, category, page=1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
def send_category_page(message, category, page):
    items_per_page = 2
    products_list = products.get(category, [])
    total_pages = (len(products_list) + items_per_page - 1) // items_per_page
    start = (page - 1) * items_per_page
    end = start + items_per_page
    page_items = products_list[start:end]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    text = f"{category} - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
    for item in page_items:
        text += f"üé∂ {item['name']}\n–¶–µ–Ω–∞: {item['price']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n\n"

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup(row_width=3)
    if page > 1:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{category}_{page - 1}"))
    markup.add(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="current_page"))
    if page < total_pages:
        markup.add(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{category}_{page + 1}"))
    home_button = types.InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home")
    markup.add(home_button)

    bot.send_message(message.chat.id, text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π"
@bot.callback_query_handler(func=lambda call: True)
def callback_page(call):
    if call.data == "home":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        send_main_menu(call.message)
    else:
        category, page = call.data.rsplit("_", 1)
        page = int(page)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        send_category_page(call.message, category, page)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
