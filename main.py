import telebot
from telebot import types
import sqlite3
import json
import os
import re
import threading

# –ü—É—Ç—å –∫ JSON —Å —Ç–æ–≤–∞—Ä–∞–º–∏
DATA_FOLDER = "data"
PRODUCTS_FILE = os.path.join(DATA_FOLDER, "products.json")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
with open(PRODUCTS_FILE, "r", encoding="utf-8") as file:
    data = json.load(file)
    categories = {category['name']: category['products'] for category in data['categories']}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
bot_token = "8126590226:AAEbDpzt7KZj8QHtj8tECgAonAQP3bKjVRA"
bot = telebot.TeleBot(bot_token)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
USER_DATA_FILE = "user_data.json"
# –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –±–æ—Ç–∞
is_bot_running = True

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
LANGUAGE_LABELS = {
    "–†—É—Å—Å–∫–∏–π": {
        "guitars": "üé∏ –ì–∏—Ç–∞—Ä—ã",
        "drums": "ü•Å –£–¥–∞—Ä–Ω—ã–µ",
        "keyboards": "üéπ –ö–ª–∞–≤–∏—à–Ω—ã–µ",
        "winds": "üé∫ –î—É—Ö–æ–≤—ã–µ",
        "cart": "üõí –ö–æ—Ä–∑–∏–Ω–∞",
        "orders": "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
        "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "invalid_name": "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.",
        "stop_message": "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!"
    },
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": {
        "guitars": "üé∏ –ì—ñ—Ç–∞—Ä–∏",
        "drums": "ü•Å –£–¥–∞—Ä–Ω—ñ",
        "keyboards": "üéπ –ö–ª–∞–≤—ñ—à–Ω—ñ",
        "winds": "üé∫ –î—É—Ö–æ–≤—ñ",
        "cart": "üõí –ö–æ—à–∏–∫",
        "orders": "üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        "welcome": "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—É –º—É–∑–∏—á–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤! –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –¥—ñ—é:",
        "invalid_name": "–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω—ñ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —ñ –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤.",
        "stop_message": "–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π!"
    },
    "English": {
        "guitars": "üé∏ Guitars",
        "drums": "ü•Å Drums",
        "keyboards": "üéπ Keyboards",
        "winds": "üé∫ Wind Instruments",
        "cart": "üõí Cart",
        "orders": "üì¶ My Orders",
        "welcome": "Welcome to the online musical instrument store! Choose a category or action:",
        "invalid_name": "First and last name should only contain letters and should not contain numbers or special characters.",
        "stop_message": "Bot stopped. See you next time!"
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON
def save_user_data(user_id, language, first_name, last_name, contact):
    try:
        user_data = {}
        try:
            with open(USER_DATA_FILE, "r", encoding="utf-8") as file:
                user_data = json.load(file)
        except FileNotFoundError:
            user_data = {}

        user_data[user_id] = {
            "language": language,
            "first_name": first_name,
            "last_name": last_name,
            "contact": contact
        }

        with open(USER_DATA_FILE, "w", encoding="utf-8") as file:
            json.dump(user_data, file, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_db():
    return sqlite3.connect("your_database.db")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def polling():
    global is_bot_running
    while is_bot_running:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            bot.stop_polling()

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@bot.message_handler(commands=["start"])
def start_command(message):
    global is_bot_running
    if not is_bot_running:
        is_bot_running = True
        threading.Thread(target=polling).start()
        bot.send_message(message.chat.id, "–ë–æ—Ç —Å–Ω–æ–≤–∞ –∑–∞–ø—É—â–µ–Ω!")
    else:
        bot.send_message(message.chat.id, "–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    ask_language(message)

# –ö–æ–º–∞–Ω–¥–∞ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
@bot.message_handler(commands=["stop"])
def stop_command(message):
    global is_bot_running
    if is_bot_running:
        is_bot_running = False
        bot.stop_polling()
        bot.send_message(message.chat.id, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(user_id):
    try:
        with open(USER_DATA_FILE, "r", encoding="utf-8") as file:
            user_data = json.load(file)
            return user_data.get(str(user_id), {}).get("language", "–†—É—Å—Å–∫–∏–π")
    except FileNotFoundError:
        return "–†—É—Å—Å–∫–∏–π"

# –ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞ –æ–±—â–µ–Ω–∏—è
def ask_language(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_ru = types.KeyboardButton("–†—É—Å—Å–∫–∏–π")
    btn_ua = types.KeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
    btn_en = types.KeyboardButton("English")
    markup.add(btn_ru, btn_ua, btn_en)
    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text in LANGUAGE_LABELS)
def handle_language(message):
    language = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.",
                     reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                         types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)))
    bot.register_next_step_handler(message, handle_contact, language)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤
def is_valid_name(full_name):
    return bool(re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ\s-]+$', full_name))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
def handle_name(message, contact, language):
    labels = LANGUAGE_LABELS[language]
    full_name = message.text
    if not is_valid_name(full_name):
        bot.send_message(message.chat.id, labels["invalid_name"])
        bot.register_next_step_handler(message, handle_name, contact, language)
        return

    first_name, last_name = full_name.split(maxsplit=1) if ' ' in full_name else (full_name, "")
    save_user_data(message.chat.id, language, first_name, last_name, contact)
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    send_main_menu(message, language)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(message, language):
    labels = LANGUAGE_LABELS[language]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton(labels["guitars"])
    btn2 = types.KeyboardButton(labels["drums"])
    btn3 = types.KeyboardButton(labels["keyboards"])
    btn4 = types.KeyboardButton(labels["winds"])
    btn5 = types.KeyboardButton(labels["cart"])
    btn6 = types.KeyboardButton(labels["orders"])
    markup.add(btn1, btn2, btn3, btn4)
    markup.add(btn5, btn6)
    bot.send_message(message.chat.id, labels["welcome"], reply_markup=markup)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    polling()